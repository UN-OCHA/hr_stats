<?php

/**
* Implements hook_permission().
*/

function hr_stats_permission(){
  return array(
    'access piwik reports' => array(
      'title' => t('Access piwik reports'),
      'description' => t('Allow access to Piwik reports.'),
    ),
    'administer piwik reports' => array(
      'title' => t('Administer Piwik reports'),
      'description' => t('Perfom basic configuration tasks for Piwik reports')
    ),
  );
}

/**
* Implements hook_menu().
*/

function hr_stats_menu(){
  $items = array();

  $items['group/%/%/admin/analytics'] = array(
    'title' => 'Analytics',
    'page callback' => 'hr_stats_reports',
    'page arguments' => array(1, 2),
    'access callback' => 'og_user_access',
    'access arguments' => array(1, 2, 'access piwik reports'),
    'file' => 'hr_stats.pages.inc',
    'description' => 'Reports on the Operation\'s visitors, popular pages and so much more ...',
  );
  $items['group/%/%/admin/analytics/visitors'] = array(
    'title' => 'Visitors',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hr_stats_reports', 'visitors_overview'),
    'access callback' => 'og_user_access',
    'access arguments' => array(1, 2, 'access piwik reports'),
    'file' => 'hr_stats.pages.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['group/%/%/admin/analytics/visitors/overview'] = array(
    'title' => 'Overview',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hr_stats_reports', 'visitors_overview'),
    'access callback' => 'og_user_access',
    'access arguments' => array(1, 2, 'access piwik reports'),
    'file' => 'hr_stats.pages.inc',
    'weight' => 1,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['group/%/%/admin/analytics/visitors/map'] = array(
    'title' => 'Map',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hr_stats_reports', 'visitors_overview_map'),
    'access callback' => 'og_user_access',
    'access arguments' => array(1, 2, 'access piwik reports'),
    'file' => 'hr_stats.pages.inc',
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
  );
  $items['group/%/%/admin/analytics/visitors/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hr_stats_reports', 'visitors_settings'),
    'access callback' => 'og_user_access',
    'access arguments' => array(1, 2, 'access piwik reports'),
    'file' => 'hr_stats.pages.inc',
    'weight' => 3,
    'type' => MENU_LOCAL_TASK,
  );

  // admin configuration

  $items['admin/config/system/hr-stats'] = array(
    'title' => 'Piwik reports for HumanitarianResponse',
		'description' => 'Administer Piwik reports for HumanitarianResponse configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hr_stats_admin_settings_form'),
    'access arguments' => array('administer piwik reports'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/reports/hr-stats'] = array(
    'title' => 'Humanitarianresponse Stats',
    'description' => 'Get statistics for Humanitarianresponse',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hr_stats_admin_reports_form'),
    'access arguments' => array('administer piwik reports'),
    'file' => 'hr_stats.pages.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
 }

 /**
 * Implements hook_og_ui_get_group_admin()
 */
 
function hr_stats_og_ui_get_group_admin($group_type, $gid) {
  $items = array();
  if (og_user_access($group_type, $gid, 'access piwik reports')) {
    $items['hr_analytics'] = array(
      'title' => t('Analytics'),
      'description' => t('Manage Operation Analytics'),
      'href' => 'admin/analytics/visitors',
    );
  }
  return $items;
}

/**
 * Implement hook_og_permission().
 */
function hr_stats_og_permission() {
  $items = array();

  $items['access piwik reports'] = array(
    'title' => t('Access Piwik reports'),
    'description' => t('Access Piwik reports for this group.'),
    'default role' => array(OG_ADMINISTRATOR_ROLE),
    'restrict access' => TRUE,
  );

  return $items;
}


/**
*  Implements hook_theme()
*/

function hr_stats_theme(){
  return array(
  	'piwik_reports' => array(
  	   'template' => 'hr-stats',
  	   'variables' => array(
  	     'data_url' => NULL,
  	     'period' => NULL,
  	   ),
  	),
  );
}

/**
*  Return the form that handles hr_stats configuration page
*/

function hr_stats_admin_settings_form($form_state){
  drupal_set_title(t('Piwik Reports'));
  
  $form['token_auth'] = array(
    '#type' => 'fieldset',
    '#title' => t('Token auth & Segment'),
    '#weight' => 2,
    '#collapsible' => TRUE,
    '#description' => t('This is needed in order to acces piwik reports. Please consult your Piwik server administrator if you have a difficulty in finding it.'),
  );
  $form['token_auth']['hr_stats_piwik_token_auth'] = array(
    '#type' => 'textfield',
    '#title' => t('Piwik Auth Token'),
    '#default_value' => variable_get('hr_stats_piwik_token_auth', ''),
    '#size' => 80,
    '#maxlength' => 255,
    '#weight' => 1,
    '#description' => t('Your piwik authentication code.'),
  );
  $form['token_auth']['hr_stats_piwik_segment'] = array(
    '#type' => 'select',
    '#title' => t('Piwik segment (if applicable)'),
    '#default_value' => variable_get('hr_stats_piwik_segment', ''),
    '#description' => t('The piwik segment (if applicable).'),
    '#options' => hr_stats_get_piwik_segments(),
  );

  return system_settings_form($form);
}

function hr_stats_get_raw_piwik_segments() {
  $token_auth = variable_get('hr_stats_piwik_token_auth', '');
  $site_id = variable_get('piwik_site_id', '');
  if($token_auth == '' || $site_id == ''){
    drupal_set_message(t('Piwik configuration for the site Id or Authentication Token has not been set properly, please consult your site admin.'), 'warning', false);

    return;
  }
  else{
    $result = drupal_http_request(hr_stats_get_url() . 'index.php?module=API&method=SegmentEditor.getAll&idSite=' . (int)$site_id . '&format=JSON&token_auth=' . $token_auth);
    if (empty($result->data)) {
      drupal_set_message(t('Please ask your administrator to check Piwik Reports configuration.'), 'warning', false);
      return;
    }
    else {
      $segs = drupal_json_decode($result->data);
      return $segs;
    }
  }
}

/**
 * Return a list of segments active on selected site.
 *
 * @param $auth_token
 *   Piwik server token auth.
 * @param $site_id
 *   Selected site id.
 *
 * @return $segments - array with keys corresponding to the values
 */

function hr_stats_get_piwik_segments(){
  $segs = hr_stats_get_raw_piwik_segments();
  if (!empty($segs)) {
    foreach($segs as $key => $seg){
      $segments[] = urldecode($seg['definition']);
    }
    return array_combine($segments, $segments);
  }
}

function hr_stats_get_url(){
  $url = variable_get('piwik_url_https', '');
  if($url == ''){
    drupal_set_message(t('Piwik server url is missing or wrong. Please ask your administrator to check Piwik Reports configuration.'), 'warning', false);
  }
  return $url;
}

function hr_stats_get_piwik_stat($method, $period, $date, $segment = '', $additional = '') {
  $token_auth = variable_get('hr_stats_piwik_token_auth', '');
  $site_id = variable_get('piwik_site_id', '');
  if($token_auth == '' || $site_id == ''){
    drupal_set_message(t('Piwik configuration for the site Id or Authentication Token has not been set properly, please consult your site admin.'), 'warning', false);
    return;
  }
  else{
    $url = hr_stats_get_url() . 'index.php?module=API&method='.$method.'&idSite=' . (int)$site_id . '&period='.$period.'&date='.$date.'&format=JSON&token_auth=' . $token_auth;
    if (!empty($segment)) {
      $url .= '&segment='.$segment;
    }
    if (!empty($additional)) {
      $url .= '&'.$additional;
    }
    $result = drupal_http_request($url);
    if (empty($result->data)) {
      drupal_set_message(t('Please ask your administrator to check Piwik Reports configuration.'), 'warning', false);
      return;
    }
    else {
      $segs = drupal_json_decode($result->data);
      return $segs;
    }
  }
}

function hr_stats_get_spaces($type, $page=1) {
  $url = 'http://www.humanitarianresponse.info/api/v1.0/'.$type.'?page='.$page;
  $operations = array();
  $data = drupal_http_request($url);
  if (!isset($data->error)) {
    if (isset($data->data)) {
      $json = drupal_json_decode($data->data);
      $operations = $json['data'];
      if (isset($json['next'])) {
        $next_ops = hr_stats_get_spaces($type, $page+1);
        $operations = array_merge($operations, $next_ops);
      }
      return $operations;
    }
  }
}

function _hr_stats_get_file_url($files_array) {
  $urls = array();
  foreach ($files_array as $files_row) {
    if (isset($files_row['files'])) {
      foreach ($files_row['files'] as $file_row) {
        if (isset($file_row['file'])) {
          $urls[] = urldecode($file_row['file']['url']);
        }
        else {
          $urls[] = urldecode($file_row['url']);
        }
      }
    }
    // Assessments
    $asst_fields = array('report', 'questionnaire', 'data');
    foreach ($asst_fields as $asst_field) {
      if (isset($files_row[$asst_field])) {
        if (!empty($files_row[$asst_field]['file']['url'])) {
          $urls[] = urldecode($files_row[$asst_field]['file']['url']);
        }
      }
    }
  }
  return $urls;
}

function hr_stats_get_urls($space_type, $space, $type, $page=1) {
  $url = 'http://www.humanitarianresponse.info/api/v1.0/'.$type.'?filter['.$space_type.']='.$space;
  if ($type != 'assessments') {
    $url .= '&fields=files';
  }
  else {
    $url .= '&fields=report,questionnaire,data';
  }
  $url .= '&page='.$page;
  $data = drupal_http_request($url);
  if (!isset($data->error)) {
    if (isset($data->data)) {
      $json = drupal_json_decode($data->data);
      $files = $json['data'];
      $urls = _hr_stats_get_file_url($files);
      if (isset($json['next'])) {
        $next_urls = hr_stats_get_urls($space_type, $space, $type, $page+1);
        $urls = array_merge($urls, $next_urls);
      }
      return $urls;
    }
  }
}


function hr_stats_get_full_stats($period, $date) {
  $segments = hr_stats_get_raw_piwik_segments();
  $operations = hr_stats_get_spaces('operations');
  $spaces = hr_stats_get_spaces('spaces');
  $op_ids = array();
  // Associate each segment with its operation
  foreach ($segments as &$segmentref) {
    $defs = explode(';', $segmentref['definition']);
    $op_url = str_replace('pageUrl=@', '', $defs[0]);
    $op_url = urldecode($op_url);
    $op_url = str_replace('humanitarianresponse.info', '', $op_url);
    $op_url = 'http://www.humanitarianresponse.info/en/'.$op_url;
    // Find the operation by its URL
    foreach ($operations as $operation) {
      if ($operation['url'] == $op_url) {
        $segmentref['space'] = $operation;
        $segmentref['space_type'] = 'operation';
        $op_ids[] = $operation['id'];
      }
    }
    // Find the space by URL
    foreach ($spaces as $space) {
      if ($space['url'] == $op_url) {
        $segmentref['space'] = $space;
        $segmentref['space_type'] = 'space';
      }
    }
  }

  $headers = array('Space', 'Number of visits', '% of visits in-country', 'Total number of downloads', 'Number of dataset downloads', 'Number of documents downloads', 'Number of infographics downloads', 'Number of assessments downloads');

  $hr_downloads = array();
  $downloads = hr_stats_get_piwik_stat('Actions.getDownloads', $period, $date, '', 'expanded=1');
  foreach ($downloads as $download) {
    if ($download['label'] == 'www.humanitarianresponse.info') {
      $hr_downloads = $download;
    }
  }

  $rows = array();

  foreach ($segments as $segment) {
    if (isset($segment['space'])) {
      $row = array();
      $row[] = $segment['space']['label'];
      $visits = hr_stats_get_piwik_stat('API.get', $period, $date, $segment['definition']);
      $row[] = $visits['nb_visits'];
      if (isset($segment['space']['country']) && $visits['nb_visits'] > 0) {
        $iso2 = $segment['space']['country']['pcode'];
        $incountry = hr_stats_get_piwik_stat('API.get', $period, $date, $segment['definition'].';countryCode=='.$iso2);
        $row[] = $incountry['nb_visits'] / $visits['nb_visits'] * 100;
      }
      else {
        if ($visits['nb_visits'] > 0) {
          $row[] = -1;
        }
        else {
          $row[] = 0;
        }
      }

      $infographics = hr_stats_get_urls($segment['space_type'], $segment['space']['id'], 'infographics');
      $documents = hr_stats_get_urls($segment['space_type'], $segment['space']['id'], 'documents');
      $datasets = hr_stats_get_urls($segment['space_type'], $segment['space']['id'], 'datasets');
      $assessments = hr_stats_get_urls($segment['space_type'], $segment['space']['id'], 'assessments');
      $urls = array_merge($infographics, $documents, $datasets, $assessments);
      $nb_dl = 0;
      $nb_dl_infographics = 0;
      $nb_dl_documents = 0;
      $nb_dl_datasets = 0;
      $nb_dl_assessments = 0;
      foreach ($hr_downloads['subtable'] as $hr_download) {
        $full_url = 'http://www.humanitarianresponse.info'.$hr_download['label'];
        if (!empty($urls) && in_array($full_url, $urls)) {
          $nb_dl += $hr_download['nb_visits'];
          if (!empty($infographics) && in_array($full_url, $infographics)) {
            $nb_dl_infographics += $hr_download['nb_visits'];
          }
          if (!empty($documents) && in_array($full_url, $documents)) {
            $nb_dl_documents += $hr_download['nb_visits'];
          }
          if (!empty($datasets) && in_array($full_url, $datasets)) {
            $nb_dl_datasets += $hr_download['nb_visits'];
          }
          if (!empty($assessments) && in_array($full_url, $assessments)) {
            $nb_dl_assessments += $hr_download['nb_visits'];
          }
        }   
      }
      $row[] = $nb_dl;
      $row[] = $nb_dl_datasets;
      $row[] = $nb_dl_documents;
      $row[] = $nb_dl_infographics;
      $row[] = $nb_dl_assessments;
      $rows[] = $row;
    }
  }

  $write = fopen('php://output', 'w');
  fputcsv($write, $headers);
  foreach ($rows as $row) {
    fputcsv($write, $row);
  }
  fclose($write);
}
